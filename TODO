- Create the full tor.Checker functionality
- Create a helper object for Tor control that contains all info about
   which ports to use and has helper functions:
   - For connection to control port
   - And for generating all arguments necessary for Torsocks

   from GUI:
      class tor.Bla
      
      at start:
         torInstance = tor.GetSystemBla()
         while true {
           full, partial = tor.Checker(torInstance).Check()
           if full != nil {
              die()
           }
           if partial == nil {
              return torInstance
           }
           torInstance = tor.CreateCustomBla()
         }


         torInstance.Stop / Cleanup
            shuts down all hidden services we have created
            shuts down our own Tor instance, if we have one
            removes the data directory stuff for Tor

         (ti *torInstance) CreateHiddenService() serviceURL {
            hs = createrealhiddenservice()
            ti.onShutdown = append(ti.onShutdown, func(){
               removeHiddenService(hs)
            })
         }


         when we want to start Mumble
            cmd = torInstance.runWithTor(ctx, "mumble", "mumble://blabla")

         torInstance.getTorController.CreateHiddenService

         basically, we don't keep tor.Controller in gtkui anymore



- Make sure all places that currently use Torify, use the new helper Tor object
- Make sure all places that currently uses Tor control port communication
   uses the new helper object
- Use the Tor checking functionality to create the Tor helper object
    or report an error we can't recover from
